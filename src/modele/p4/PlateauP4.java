package modele.p4;

import exception.ColonnePleine;
import exception.FormatReponseInvalide;
import exception.NombreBatonnetsInvalide;
import exception.NumeroTasInvalide;
import exception.PlusDeRotations;
import modele.abstrait.Plateau;

/**
 * Classe repr√©sentant un plateau de jeu de puissance 4
 */
public class PlateauP4 extends Plateau {
    /**
     * Le tableau repr√©sentant le plateau de puissance 4
     */
    private byte[][] plateau;
    /**
     * Stock la position o√π le dernier jeton a √©t√© pos√©
     */
    private byte[] dernierCoup = new byte[2];
    /**
     * Stocker si la derniere action etait une rotation
     */
    private boolean wasRotation = false;
    /**
     * Toggle des rotations
     */
    private boolean rotations;
    /**
     * Compte le nombre de rotations effectu√©es par les joueurs
     */
    private byte[] nbRotations = {4,4};
    /**
     * Permet de construire un nouveau PlateauNim.
     */
    public PlateauP4() {}

    /**
     * <p>Remplit le plateau en cr√©ant le plateau</p>
     * <p>Remplace le plateau d√©j√† existant</p>
     */
    public void reset() {
        plateau = new byte[7][7];
    }

    /**
     * Permet de verifier si une partie est finie, c'est-√†-dire si 4 pions sont align√©s ou le plateau est plein
     *
     * @return true si la partie est fini, sinon false
     */
    public boolean verifierFin() {
        return (verifierVictoire() !=0) || estPlein();
    }

    /**
     * Permet de v√©rifier si une partie est gagn√©e, c'est-√†-dire s'il y a une ligne de 4 pions ou plus cons√©cutifs de m√™me couleur
     * a partir du dernier coup jou√© si la derniere action etait de placer un jeton, ou de n'importe ou si la derniere
     * action etait une rotation.
     *
     * @return le num√©ro du gagnant si la partie est gagn√©e, sinon 0
     */
    public byte verifierVictoire() {
        if (wasRotation) {
            for (byte i = 0; i < 7; i++) {
                for (byte j = 0; j < 7; j++) {
                    if (plateau[i][j] != 0) {
                        byte candidate = verifierVictoireCase(i,j);
                        if (candidate != 0) {
                            return candidate;
                        }
                    }
                }
            }
            return 0;
        } else {
            return verifierVictoireCase(dernierCoup[0], dernierCoup[1]);
        }
    }

    /**
     * Permet de verifier si un jeton plac√© aux coordonn√©es x,y est gagnant c'est-√†-dire s'il appartient a
     * une ligne de 4 pions ou plus cons√©cutifs de m√™me couleur
     *
     * @param x coordonn√©e verticale
     * @param y coordonn√©e horizontale
     * @return le num√©ro du gagnant si le jeton est gagnant, 0 sinon
     */
    public byte verifierVictoireCase(byte x, byte y) {
        /*Structure du tableau
         *   0 : Ligne horizontale (-)
         *   1 : Ligne verticale (|)
         *   2 : Ligne diagonale partant de en haut √† gauche jusqu'√† en bas √† droite (\)
         *   3 : Ligne diagonale partant de en bas √† gauche jusqu'√† en haut √† droite (/)
         */
        byte[][] lignes = new byte[4][7];
        byte color = plateau[x][y];

        if (color == 0){
            return 0;
        }

        lignes[0] = plateau[x]; // Remplissage du tableau pour la ligne horizontale

        for (int i=0; i < 7; i++) { // Remplissage du tableau pour la ligne verticale
            lignes[1][i] = plateau[i][y];
        }
        // Ligne diagonale partant de en haut √† gauche jusqu'√† en bas √† droite
        int lig = x;
        int col = y;
        while (lig >= 0 && col >= 0) { // Monte √† gauche
            lignes[2][lig] = plateau[lig][col];
            lig--;
            col--;
        }
        lig = x + 1;
        col = y + 1;
        while (lig < 7 && col < 7) { // Descend √† droite
            lignes[2][lig] = plateau[lig][col];
            lig++;
            col++;
        }
        // Ligne diagonale partant de en bas √† gauche jusqu'√† en haut √† droite
        lig = x;
        col = y;
        while (lig < 7 && col >= 0) { // Descend √† gauche
            lignes[3][lig] = plateau[lig][col] ;
            lig++;
            col--;
        }
        lig = x -1;
        col = y +1;
        while (lig >= 0 && col < 7) { // Monte √† droite
            lignes[3][lig] = plateau[lig][col];
            lig--;
            col++;
        }
        //V√©rification si 4 jetons sont align√©s
        for (byte[] direction : lignes) {
            int compteur = 0;
            for (byte jeton : direction) {
                if (jeton == color) {
                    compteur++;
                } else {
                    compteur = 0;
                }
                if (compteur == 4) {
                    return plateau[x][y];
                }
            }
        }
        return 0;
    }

    /**
     * Permet de v√©rifier si le plateau est plein
     * @return true si le plateau est plein, sinon false
     */
    public boolean estPlein(){
        for (byte[] ligne : plateau){
            for (int jeton : ligne){
                if (jeton == 0){
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * <p>Permet de retourner l'√©tat du plateau sous la forme d'un tableau de byte</p>
     * <p>Inutilis√©, pourra √™tre supprim√© si jamais utilis√©
     * (sera probablement utilis√©e quand les IA seront impl√©ment√©)</p>
     *
     * @return un tableau repr√©sentant le plateau de puissance 4
     */
    public byte[][] getPlateau(){
        return plateau;
    }

    /**
     * <p>Permet de placer un jeton dans une colonne</p>
     * <p>Parcours la colonne √† partir du bas et place le jeton d√®s qu'une case est vide (0)</p>
     * @param colonne L‚Äôindice de la colonne o√π le jeton doit √™tre plac√© [0,...,6]
     * @param joueur  Le num√©ro du joueur [1,2]
     * @throws FormatReponseInvalide Si le num√©ro de colonne demand√© est inexistant
     * @throws ColonnePleine Si la colonne demander est pleine
     */
    public void placerJeton(byte colonne, byte joueur) throws FormatReponseInvalide, ColonnePleine {
        if (colonne<0 || colonne>6){
            throw new FormatReponseInvalide("Veuillez entrer un entier compris entre 1 et 7");
        }
        boolean estPlein = true;
        for (byte ligne = 6; ligne >= 0; ligne--) {
            if (plateau[ligne][colonne] == 0) {
                plateau[ligne][colonne] = joueur;
                dernierCoup[0] = ligne;
                dernierCoup[1] = colonne;
                wasRotation = false;
                estPlein = false;
                break;
            }
        }
        if (estPlein){
            throw new ColonnePleine("Le jeton ne peut pas √™tre plac√© ");
        }
    }

    /**
     * <p>Renvoie une repr√©sentation sous forme de cha√Æne de caract√®res de l'objet.</p>
     * <p>La cha√Æne est compos√©e de la repr√©sentation de la matrice,
     * dispos√©e horizontalement avec un espacement appropri√© pour les centrer dans une ligne.</p>
     *
     * @return une repr√©sentation sous forme de cha√Æne de caract√®res de l'objet.
     */
    @Override
    public String toString() {
        String string = "1\uFE0F‚É£ 2\uFE0F‚É£ 3\uFE0F‚É£ 4\uFE0F‚É£ 5\uFE0F‚É£ 6\uFE0F‚É£ 7\uFE0F‚É£\n";
        for (byte[] ligne : plateau){
            for (byte contenu : ligne){
                if (contenu == 0){
                    string+= "‚ö´ ";
                } else if (contenu == 1) {
                    string+= "üî¥ ";
                }else {
                    string+= "üü° " ;
                }
            }
            string+="\n";
        }
        return string;
    }

    /**
     * M√©thode qui permet d'activer ou d√©sactiver la rotation
     * @param i true ou false pour activer
     */
    public void setRotations(boolean i){
        this.rotations= i;
    }

    /**
     * Getter pour savoir si la rotation est activ√©
     * @return l'√©tat d'activation de la rotation
     */
    public boolean isRotations(int numJoueur) {
        if (!rotations) {
            return false;
        }
        return nbRotations[numJoueur] > 0;
    }

    /**
     * Fonction qui permet de faire tourner le plateau dans un sens
     * @param sens Le sens de la rotation true pour horaire et false pour antihoraire
     * @param joueur Le num√©ro du joueur
     * @throws PlusDeRotations Si le joueur n'a plus de rotation disponible
     */
    public void rotation(boolean sens, int joueur)  throws PlusDeRotations {
        if (nbRotations[joueur] > 0) {
            nbRotations[joueur]--;
            wasRotation = true;
            if (sens) {
                rotationHoraire();
            } else {
                rotationAntiHoraire();
            }
        } else {
            throw new PlusDeRotations("Plus de rotations autoris√©es");
        }
    }

    /**
     * Fonction qui permet de faire tourner le plateau dans le sens horaire
     */
    private void rotationHoraire() {
        byte[][] nouveau = new byte[7][7];
        for (int i = 0; i < 7; i++) { // la ligne √† transformer en colonne
            int k = 6; // la profondeur √† laquelle placer le prochain jeton
            for (int j = 6; j >= 0; j--) { // le parcours de la ligne
                if (plateau[i][j] != 0) {
                    nouveau[k][6-i] = plateau[i][j];
                    k--;
                }
            }
        }
        plateau = nouveau;
    }

    /**
     * Fonction qui permet de faire tourner le plateau dans le sens horaire
     */
    private void rotationAntiHoraire() {
        byte[][] nouveau = new byte[7][7];
        for (int i = 0; i < 7; i++) { //la ligne √† transformer en colonne
            int k = 6; // la profondeur √† laquelle placer le prochain jeton
            for (int j = 0; j < 7; j++) { // le parcours de la ligne
                if (plateau[i][j] != 0) {
                    nouveau[k][i] = plateau[i][j];
                    k--;
                }
            }
        }
        plateau = nouveau;
    }
}